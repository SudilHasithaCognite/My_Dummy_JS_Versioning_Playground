name: Release Pipeline

# Ensure the GITHUB_TOKEN has rights to push and create PRs (but not bypass protections)
permissions:
  contents: write
  pull-requests: write

on:
  push:
    branches:
      - main       # Trigger on main (protected)
      - "release-*"  # Trigger on release candidate branches

jobs:
  # Build job: always run on pushes to build and test the project
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.OS }}-mods-${{ hashFiles('package.json', 'yarn.lock') }}
      - name: Install dependencies ðŸ”§
        run: yarn install --immutable
      - name: Build package
        run: yarn build

  # Publish job: runs only for release-related commits (with [release] or on release branches)
  publish:
    # Only proceed for commits indicating a release
    if: ${{ !contains(github.event.head_commit.message, '[skip-ci]') && (
            (github.ref == 'refs/heads/main' && ( contains(github.event.head_commit.message, '[release]') 
                                                || startsWith(github.event.head_commit.message, 'chore(release)') )) 
         || (startsWith(github.ref, 'refs/heads/release-') && ( startsWith(github.event.head_commit.message, 'feat:') 
                                                              || startsWith(github.event.head_commit.message, 'feat(')
                                                              || startsWith(github.event.head_commit.message, 'fix:') 
                                                              || startsWith(github.event.head_commit.message, 'fix(') 
                                                              || contains(github.event.head_commit.message, '[release]') ))
         ) }}
    runs-on: ubuntu-latest
    environment: CD  # Use "CD" environment (if defined for NPM tokens, etc.)
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true  # Prevent direct push using default token
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.OS }}-mods-${{ hashFiles('package.json', 'yarn.lock') }}
      - name: Install dependencies ðŸ”§
        run: yarn install --immutable

      - name: Configure Git & NPM
        env:
          GH_TOKEN: ${{ secrets.GH_LERNA_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          git config --global user.email "sudil.abeyagunasekera@cognite.com"
          git config --global user.name "SudilHasithaCognite"
          git remote set-url origin "https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}.git"
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc

      # **Remove RC tags when a release branch is merged into main**
      - name: Remove RC suffix from version
        if: ${{ github.ref == 'refs/heads/main' 
                && contains(github.event.head_commit.message, 'Merge pull request') 
                && contains(github.event.head_commit.message, 'release-') 
                && contains(github.event.head_commit.message, '[release]') }}
        run: |
          # Remove "-rc.X" from package versions on main after RC branch merge
          node scripts/remove-rc-tags.js
          git add packages/*/package.json
          git commit -m "chore: remove RC tags (from release branch merge)"
      
      # **Bump version using Lerna (without pushing directly to main)**
      - name: Bump version with Lerna
        env:
          GH_TOKEN: ${{ secrets.GH_LERNA_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            # On main: decide between major or conventional bump based on commit
            EVENT_JSON=$(cat "${GITHUB_EVENT_PATH}")
            HEAD_MSG=$(echo "$EVENT_JSON" | jq -r '.head_commit.message')
            MERGE_MSG=$(echo "$EVENT_JSON" | jq -r '.commits[-1].message')
            if [[ "$HEAD_MSG" == *"Merge pull request"* && "$HEAD_MSG" == *"release-"* && "$HEAD_MSG" == *"[release]"* ]] \
            || [[ "$MERGE_MSG" == *"Merge pull request"* && "$MERGE_MSG" == *"release-"* && "$MERGE_MSG" == *"[release]"* ]]; then
              echo "Detected merge of release- branch into main performing major version bump"
              yarn lerna version major --conventional-commits --yes --no-push 
            elif [[ "$HEAD_MSG" == *"[release]"* ]]; then
              echo "Conventional release commit on main performing standard version bump"
              yarn lerna version --conventional-commits --yes --no-push 
              echo "Release version already bumped on main skipping version increment"
            fi
          elif [[ "${GITHUB_REF}" == refs/heads/release-* ]]; then
            echo "Release branch commit performing prerelease bump (rc)"
            yarn lerna version --conventional-commits --conventional-prerelease --preid rc --yes --no-push 
          fi

      # **Push version changes to a new branch or current release branch**
      - name: Push release changes
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            # Create a new branch for the version bump PR
            releaseBranch="release-bump-${{ github.run_id }}"
            git checkout -b "$releaseBranch"
            # Include tags when pushing (Lerna has created tags locally with --no-push)
            git push origin "$releaseBranch" --follow-tags
          elif [[ "${GITHUB_REF}" == refs/heads/release-* ]]; then
            # On release branch, push changes (including tags) back to origin
            git push origin "${GITHUB_REF#refs/heads/}" --follow-tags
          fi

      # **Open a pull request if changes were pushed to a release-bump branch**
      - name: Create release PR
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          GH_TOKEN: ${{ secrets.GH_LERNA_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "${GH_TOKEN}" > gh_token.txt
          gh auth login --with-token < gh_token.txt
          # Create a PR from the release-bump branch to main
          gh pr create --base main --head "$releaseBranch" \
            --title "chore(release): $(jq -r '.head_commit.message' "$GITHUB_EVENT_PATH" | sed -E 's/.*\[release\].*/Release/' )" \
            --body "ðŸ¤– **Automated PR** Version bump and changelog for new release. Please review and merge to publish." 
          # (No auto-merge; human approval required.)
      
      # **Publish to NPM (only after PR merges or for RC commits)**
      - name: Publish to NPM
        if: ${{ startsWith(github.ref, 'refs/heads/release-') || startsWith(github.event.head_commit.message, 'chore(release)') }}
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "NPM token debugging ${NPM_TOKEN}"
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "Publishing final release to NPMâ€¦"
            yarn lerna publish from-package --yes --no-git-reset
          elif [[ "${GITHUB_REF}" == refs/heads/release-* ]]; then
            echo "Publishing pre-release (rc) to NPMâ€¦"
            yarn lerna publish from-package  --pre-dist-tag rc --yes --no-git-reset
          fi
